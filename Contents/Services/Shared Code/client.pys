from config import *
from recentCourse import RecentCourse
from relatedCourse import RelatedCourse
from course import Course
from bookmark import Bookmark
from datetime import datetime
from functools import wraps
from urllib import quote

class LoginError(Exception):
    ''' Raise this when a login attempt is not successful. '''

class ClientError(Exception):
    ''' Raise this when a client request fails. '''

def handle_unauthorised(func):
    @wraps(func)
    def func_wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Ex.HTTPError as e:
            if e.code == 401:
                raise ClientError(L('ERROR_UNAUTHORISED'))
            raise
    return func_wrapper

class Client:
    def __init__(self):
        self.token = None
        self.token_expiry_date = None

    @property
    def username(self):
        return Prefs['username']

    @property
    def password(self):
        return Prefs['password']

    @property
    def is_logged_in(self):
        return bool(self.get_login_token())

    def get_url(self, path):
        return '{0}/{1}'.format(BASE_URL, path)

    def get_login_token(self):
        tokenExpiration = self.token_expiry_date
        login_token = None
        if tokenExpiration:
            if tokenExpiration > datetime.now():
                login_token = self.token
            else:
                self.token = None
                self.token_expiry_date = None
        return login_token

    def login(self, reset = False):
        if reset:
            self.token = None
            self.token_expiry_date = None
            HTTP.ClearCache()
            HTTP.ClearCookies()

        login_token = self.get_login_token()
        if login_token:
            return

        if not self.username or not self.password:
            raise LoginError(L('ERROR_UNSPECIFIED_LOGIN'))

        Log.Info('Logging in...')
        login_headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json'
        }

        payload = { 'username': self.username, 'password': self.password }
        login_url = self.get_url('mobile-api/v1/user/signin')

        Log.Debug('Using url: %s', login_url)
        try:
            response = HTTP.Request(login_url, values = payload, headers = login_headers, method = 'POST')
            responseJson = JSON.ObjectFromString(response.content)
            self.token = responseJson['token']
            tokenExpiration = responseJson['expiration']
            self.token_expiry_date = datetime.strptime(tokenExpiration, '%Y-%m-%dT%H:%M:%SZ')
        except Ex.HTTPError:
            raise LoginError(L('ERROR_FAILED_LOGIN'))

    @handle_unauthorised
    def recently_viewed(self):
        Log.Info('Getting recently viewed courses.')

        headers = {
            'ps-jwt': self.get_login_token(),
            'Accept': 'application/json'
        }

        recently_viewed_url = self.get_url('mobile-api/v1/user/courses/recent')

        Log.Debug('Using url: %s', recently_viewed_url)
        response = HTTP.Request(recently_viewed_url, headers = headers)
        return [RecentCourse(c) for c in JSON.ObjectFromString(response.content)['collection']]

    @handle_unauthorised
    def new_courses(self):
        Log.Info('Getting new courses.')

        headers = {
            'ps-jwt': self.get_login_token(),
            'Accept': 'application/json'
        }

        new_course_url = self.get_url('mobile-api/v1/library/new/courses')

        Log.Debug('Using url: %s', new_course_url)
        response = HTTP.Request(new_course_url, headers = headers)
        return [Course(c) for c in JSON.ObjectFromString(response.content)['collection']]

    @handle_unauthorised
    def search(self, query):
        Log.Info('Searching for courses matching \'%s\'.', query)

        headers = {
            'ps-jwt': self.get_login_token(),
            'Accept': 'application/json'
        }

        search_url = self.get_url('mobile-api/v1/library/search?q={0}&type=course'.format(quote(query)))

        Log.Debug('Using url: %s', search_url)
        response = HTTP.Request(search_url, headers = headers)
        results = JSON.ObjectFromString(response.content)['collection']
        return [Course(c) for c in map(lambda x: x['course'], filter(lambda x: x['type'] == 'course', results))]

    @handle_unauthorised
    def popular_courses(self):
        Log.Info('Getting popular courses.')

        headers = {
            'ps-jwt': self.get_login_token(),
            'Accept': 'application/json'
        }

        popular_course_url = self.get_url('mobile-api/v1/library/popular/courses')

        Log.Debug('Using url: %s', popular_course_url)
        response = HTTP.Request(popular_course_url, headers = headers)
        return [Course(c) for c in JSON.ObjectFromString(response.content)['collection']]

    @handle_unauthorised
    def related_courses(self, courseName):
        Log.Info('Getting courses related to \'%s\'.', courseName)

        headers = {
            'ps-jwt': self.get_login_token(),
            'Accept': 'application/json'
        }

        related_course_url = self.get_url('mobile-api/v1/library/courses/{0}/related'.format(courseName))

        Log.Debug('Using url: %s', related_course_url)
        response = HTTP.Request(related_course_url, headers = headers)
        return [RelatedCourse(c) for c in JSON.ObjectFromString(response.content)['collection']]

    @handle_unauthorised
    def get_course(self, courseName):
        Log.Info('Getting course "%s".', courseName)

        headers = {
            'ps-jwt': self.get_login_token(),
            'Accept': 'application/json'
        }

        course_url = self.get_url('mobile-api/v1/library/courses/{0}'.format(courseName))

        Log.Debug('Using url: %s', course_url)
        response = HTTP.Request(course_url, headers = headers)
        return Course(JSON.ObjectFromString(response.content))

    @handle_unauthorised
    def get_video(self, courseName, moduleName, authorHandle, clipIndex, isWidescreen = True):
        Log.Info('Getting video URL for course="%s", module="%s", author="%s", clip=%s.', courseName, moduleName, authorHandle, clipIndex)

        headers = {
            'ps-jwt': self.get_login_token(),
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }

        format = '1280x720mp4' if isWidescreen else '1024x768mp4'

        videos_url = self.get_url('mobile-api/v1/library/videos')
        videoRequestDict = { 'author': authorHandle,
            'course': courseName,
            'module': moduleName,
            'moduleindexposition': clipIndex,
            'format': format }

        videoRequest = JSON.StringFromObject(videoRequestDict)

        Log.Debug('Using url: %s. Posting \'%s\'', videos_url, videoRequest)

        response = HTTP.Request(videos_url, data = videoRequest, headers = headers, method = 'POST')
        return JSON.ObjectFromString(response.content)['url']

    @handle_unauthorised
    def get_bookmarked_courses(self):
        Log.Info('Getting bookmarks.')

        headers = {
            'ps-jwt': self.get_login_token(),
            'Accept': 'application/json'
        }

        bookmarks_url = self.get_url('mobile-api/v1/user/bookmarks')

        Log.Debug('User url: %s', bookmarks_url)
        response = HTTP.Request(bookmarks_url, headers = headers)
        rv = []
        for b in JSON.ObjectFromString(response.content)['collection']:
            bookmark = Bookmark(b)
            rv.append(self.get_course(bookmark.courseName))
        return rv
